DEFINE building USING battery AND column AND floors
	SEQUENCE create battery USING elevator
		FOR n elevatos INIT NEW INSTANCE of battery END FOR
	ENDSEQUENCE
	SEQUENCE create columns USING elevator
		FOR n elevatos INIT NEW INSTANCE of column END FOR
	ENDSEQUENCE
	SEQUENCE create floors USING columns
		FOR EACH column INIT NEW INSTANCE of floors END FOR
	ENDSEQUENCE
ENDDEFINE

SEQUENCE ORDER USING current_floor AND Direction
		FOR  increment of i  to i = 12 
				IF floorTarget = elevator.floors[] && elevator Direction = request Direction
				RETURN colunn number AND elevator number 
					IF elevator number = idle || isTmpStay
						CALL MOVE TO current_floor  
						CALL OPEN_DOOR WITH current_floor
						CALL CLOSE_BUTTON 
						CALL REST
		 		ELSE ADD ORDER TO elevator.Queue
ENDSEQUENCE

ENDSEQUENCE
SEQUENCE OPEN_DOOR
FOR increment of i  to i = 12
IF elevator = stop THEN
	IF open_door button is pressed THEN
		“open door”
ELSE IF elevator != “at a floor” THEN
	IF open_door button is pressed THEN
		do nothing
ELSE
	do nothing
ENDSEQUENCE
SEQUENCE CLOSE_BUTTON
FOR increment of i  to i = 12
IF elevator = stop THEN
	IF close_door button is pressed && capacity < maximumCapacity && door.path is clear && wait 5 seconds THEN
	check if a human is on the door path
	IF there is a human is on the door path DO ALERT
    
    WHILE there is a human is on the door path
			wait 2 seconds
			check if a human is on the door path
	ELSE IF there is no human is on the door path DO
		CLOSE ELEVATOR
ELSE IF elevator != “at a floor” THEN
	IF close_door button is pressed THEN
		do nothing
ELSE
	do nothing
ENDSEQUENCE
SEQUENCE REST 
FOR increment of i to i = 12
IF current_floor = next_floor in currentQueue - 1 THEN
	 slow down speed =  0.5speed;
	stop at next_floor in currentQueue
ELSE IF speed = maximum THEN
	IF current_floor = next_floor in currentQueue + 1 THEN
		slow down speed = 0.5 speed;
		stop at next_floor in currentQueue
	ELSE
		continue
ELSE
	do MOVE TO middle Column For optimize effiency

END SEQUENCE 
